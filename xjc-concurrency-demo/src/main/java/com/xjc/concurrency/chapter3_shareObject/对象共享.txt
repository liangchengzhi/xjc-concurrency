# 可见性
线程中共享的变量，读和写之间是不可见的，只有加了volati1e才能保证可见性。
如果不加volatile，可能读出来是一个失效的数据。
加锁，可以保证互斥性，也可以保证数据有效性。

# volatile 变量
当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的。
因此不会将该变量与其他内存一起重排序。该变量不会被缓存在寄存器或者其他处理器
看不见的地方。因此，总能读取到最新值。
volatile可以说是轻量级的同步机制。

volatile的使用：
仅当volatile能简化代码实现以及同步策略才使用。
1、确保他们的可见性
2、确保引用对象的可见性
3、一般用于标识程序的生命周期（如初始化、关闭）

volatile 的局限性：
1、只保证可见性，不能保证原子性

因此最好保证只有一个地方修改变量的值，不存在竞争，否则会出现问题

典型用法：
volatile boolean asleep;
while(!asleep){
	countSomeSheep();
}
